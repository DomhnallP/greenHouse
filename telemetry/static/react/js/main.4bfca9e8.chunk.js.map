{"version":3,"sources":["logo.svg","components/charts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LineChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","options","chart","height","width","type","xaxis","series","points","JSON","parse","values","forEach","element","push","map","Number","test","name","data","console","log","react_default","a","createElement","react_apexcharts_min_default","Component","App","className","charts","window","token","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oMC4CzBC,cAxCX,SAAAA,EAAYC,GAAM,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAAS,CACLC,MAAO,CACHC,OAAQ,IACRC,MAAO,OACPC,KAAM,QAEVC,MAAO,CACHD,KAAM,aAGdE,OAAQ,IAEZ,IAAIC,EAAS,GACCC,KAAKC,MAAM,CAACjB,EAAKD,MAAMmB,SAC7BC,QAAQ,SAAAC,GACXL,EAAOM,KAAKD,EAAQE,IAAIC,WAE7B,IAAIC,EAAO,CACPC,KAAM,UACNC,KAAMX,GAtBI,OAwBdY,QAAQC,IAAIJ,EAAKE,KAAK,GAAG,IACzBC,QAAQC,WAAWJ,EAAKE,KAAK,GAAG,IAChC1B,EAAKO,MAAMO,OAAS,CAACU,GA1BPxB,wEA6Bd,OAAO6B,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACAtB,QAAWL,KAAKI,MAAMC,QACtBM,OAAUX,KAAKI,MAAMO,OACrBF,KAAO,OACPF,OAAS,MACTC,MAAQ,iBApCAsB,aCeTC,mLAXX,OACEL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,eAGlBN,EAAAC,EAAAC,cAACK,EAAD,CAAWlB,OAAUmB,OAAOC,gBAPlBL,aCOEM,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"js/main.4bfca9e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport Chart from 'react-apexcharts';\r\n\r\nclass LineChart extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            options: {\r\n                chart: {\r\n                    height: 380,\r\n                    width: \"100%\",\r\n                    type: \"area\",\r\n                },\r\n                xaxis: {\r\n                    type: 'datetime'\r\n                  }\r\n            },\r\n            series: []\r\n        }\r\n        var points = [];\r\n        var jsonArr = JSON.parse([this.props.values]);\r\n        jsonArr.forEach(element => {\r\n             points.push(element.map(Number))\r\n        });\r\n        var test = {\r\n            name: 'series1',\r\n            data: points\r\n        }\r\n        console.log(test.data[0][0]);\r\n        console.log(typeof test.data[0][0]);\r\n        this.state.series = [test];\r\n    }\r\n    render(){\r\n        return <div>\r\n                <Chart\r\n                options = {this.state.options}\r\n                series = {this.state.series}\r\n                type = 'line'\r\n                height = '400'\r\n                width = '100%'\r\n                />\r\n               </div>\r\n    }\r\n}\r\nexport default LineChart;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LineChart from './components/charts.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* <p>My token = {window.token}</p> */}\n        </header>\n        <LineChart values = {window.token}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}